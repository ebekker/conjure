@page "/test6"
@using Microsoft.EntityFrameworkCore
@inherits ScreenBase<DataWorkspace>

<KitScreen Screen=@this>
    <Actions>
        <KitAction Binding=@(() => Action5()) />
        <KitAction Binding=@(() => SaveChanges())
                   CanInvoke=@((arg) => arg.Result = CanSaveChanges()) />
    </Actions>
    <ChildContent>
        <MudGrid>
            <MudItem md="8">
                @* Need to specify TDataItem until https://github.com/dotnet/aspnetcore/issues/25588 *@
                <KitDataGrid Binding=@(() => DWS.AdventureWorksLT2017.Customers) TDataItem=@(Customer)
                             @ref=_customerDataGrid
                             @bind-SelectedItem=_selectedCustomer
                             AllowSearch=@true>
@*
                    <SortBy>
                        <KitSortBy Binding=@(item => item!.FirstName.Substring(2,1)) />
                        <KitSortBy Binding=@(item => item!.LastName) />
                        <KitSortBy Binding=@(item => item!.EmailAddress) />
                    </SortBy>
                    <SearchBy>
                        <KitSearchBy Binding=@((item) => item!.FirstName) />
                        <KitSearchBy Binding=@((item) => item!.LastName) />
                        <KitSearchBy Binding=@((item) => item!.EmailAddress) />
                    </SearchBy>
*@
                    <Actions>
                        <KitAction Binding=@(() => AddCustomer())
                            Label="" Description="Add new customer" Icon=@Icons.Filled.Add/>
                        <KitAction Binding=@(() => DelCustomer())
                            CanInvoke=@(arg => arg.Result = _selectedCustomer != null)
                            Label="" Description="Delete customer" Icon=@Icons.Filled.Delete/>
                    </Actions>
                    <Fields>
                        @*<KitField TDataItem=@(Customer) Label="ST">
                            @GetEntityState(context!)
                        </KitField>*@
                        <KitField TDataItem=@(Customer) Binding=@(item => item.FirstName)
                                  SortBy=@true SearchBy=@true />
                        <KitField TDataItem=@(Customer) Binding=@(item => item.LastName)
                                  SortBy=@true SearchBy=@true />
                        <KitField TDataItem=@(Customer) Binding=@(item => item.EmailAddress)
                                  SortBy=@true SearchBy=@true />
                    </Fields>

                </KitDataGrid>
                <div>Selected Customer: @_selectedCustomer</div>
            </MudItem>
            <MudItem md="4">
                <KitTextField Binding=@(() => _selectedCustomer!.FirstName) />
                <KitTextField Binding=@(() => _selectedCustomer!.MiddleName) />
                <KitTextField Binding=@(() => _selectedCustomer!.LastName) />
                <KitTextField Binding=@(() => _selectedCustomer!.EmailAddress) />
            </MudItem>
        </MudGrid>
    </ChildContent>
</KitScreen>



@code {
    private string? someSampleText;
    private bool canInvoke;

    private KitDataGrid<Customer> _customerDataGrid;

    private Customer? _selectedCustomer;

    private Task Action5()
    {
        Console.WriteLine("Action #5 Invoked");
        return Task.CompletedTask;
    }

    private bool CanSaveChanges()
    {
        return DWS.HasChanges();
    }

    private async Task SaveChanges()
    {
        await DWS.SaveChangesAsync();
    }

    string GetEntityState(object entity)
    {
        if (!DWS.GetEntityEntry(entity, out var entry))
            return "?";

        return entry!.State switch
        {
            EntityState.Unchanged => "",
            EntityState.Added => "⨹",  // ➕⍉➖❌❔❓⁉ minus
            EntityState.Deleted => "⍉",
            EntityState.Modified => "Δ",
            EntityState.Detached => "~",
            _ => "??",
        };
    }

    async Task AddCustomer()
    {
        var entity = DWS.AdventureWorksLT2017.Customers.CreateProxy();

        entity.PasswordHash = "NONE";
        entity.PasswordSalt = "NONE";

        var entry = DWS.AdventureWorksLT2017.Customers.Add(entity);
        _selectedCustomer = entry.Entity;
        await _customerDataGrid.ReloadData();
    }

    async Task DelCustomer()
    {
        if (_selectedCustomer == null)
            return;

        DWS.AdventureWorksLT2017.Remove(_selectedCustomer);
        await _customerDataGrid.ReloadData();
    }
}