#pragma warning disable IDE0073 // The file header is missing or not located at the top of the file
/** THIS IS AUTOGENERATED BY CONJURE EFX **/
#pragma warning restore IDE0073 // The file header is missing or not located at the top of the file

using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace {{EntityContext.ContextNamespace}}
{
    {{~
    $contextClass = EntityContext.ContextClass | to_safe_name
    $baseClass = EntityContext.ContextBaseClass | to_safe_name
    $contextName = EntityContext.ContextClass | to_safe_name
    -}}

    {{-if Options.Data.Context.Document~}}
    /// <summary>
    /// A <see cref="DbContext" /> instance represents a session with the database and can be used to query and save instances of entities.
    /// </summary>
    {{~end~}}
    public partial class {{$contextClass}} : {{$baseClass}}
    {
        private const string DesignTimeProvider = "{{Options.Database.Provider | string.escape}}";
        private const string DesignTimeConnectionString = "{{Options.Database.ConnectionString | string.escape}}";

        {{~if Options.Data.Context.Document}}
        /// <summary>
        /// Initializes a new instance of the <see cref="{{$contextName}}"/> class.
        /// </summary>
        /// <param name="options">The options to be used by this <see cref="DbContext" />.</param>
        {{~end~}}
        public {{$contextName}}(DbContextOptions<{{$contextName}}> options)
            : base(options)
        {
        }

        {{~## GenerateDbSets(); ##~}}
        #region Generated Properties
        {{~for $entityType in (EntityContext.Entities | array.sort 'ContextProperty')-}}
        {{~
        $entityClass = $entityType.EntityClass | to_safe_name
        $propertyName = $entityType.ContextProperty | to_safe_name
        $fullName = $entityType.EntityNamespace + '.' + $entityClass
        -}}

        {{-if Options.Data.Context.Document~}}
        /// <summary>
        /// Gets or sets the <see cref="T:Microsoft.EntityFrameworkCore.DbSet`1" /> that can be used to query and save instances of <see cref="{{$fullName}}"/>.
        /// </summary>
        /// <value>
        /// The <see cref="T:Microsoft.EntityFrameworkCore.DbSet`1" /> that can be used to query and save instances of <see cref="{{$fullName}}"/>.
        /// </value>
        {{~end~}}
        public virtual DbSet<{{$fullName}}> {{$propertyName}} { get; set; } = default!;

        {{~end~}}
        #endregion // Generated Properties

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            base.OnConfiguring(optionsBuilder);
            if (!optionsBuilder.IsConfigured)
            {
                {{~if Options.Database.Provider == "SqlServer"~}}
                optionsBuilder.UseSqlServer(DesignTimeConnectionString);
                {{~end~}}
            }
        }

        {{~## GenerateOnConfiguring(); ##~}}
        {{~if Options.Data.Context.Document~}}
        /// <summary>
        /// Configure the model that was discovered from the entity types exposed in <see cref="T:Microsoft.EntityFrameworkCore.DbSet`1" /> properties on this context.
        /// </summary>
        /// <param name="modelBuilder">The builder being used to construct the model for this context.</param>
        {{~end~}}
        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            #region Generated Configuration
            base.OnModelCreating(modelBuilder);
            {{~for $entityType in (EntityContext.Entities | array.sort 'MappingClass')~}}
            modelBuilder.ApplyConfiguration(new {{$entityType.MappingNamespace}}.{{$entityType.MappingClass | to_safe_name}}());
            {{~end~}}
            #endregion // Generated Configuration
        }
    }
}
