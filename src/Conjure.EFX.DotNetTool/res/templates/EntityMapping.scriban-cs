#pragma warning disable IDE0073 // The file header is missing or not located at the top of the file
/** THIS IS AUTOGENERATED BY CONJURE EFX **/
#pragma warning restore IDE0073 // The file header is missing or not located at the top of the file

using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace {{Entity.MappingNamespace}}
{
    {{~
    $mappingClass = Entity.MappingClass | to_safe_name
    $entityClass  = Entity.EntityClass | to_safe_name
    $safeName     = Entity.EntityNamespace + '.' + $entityClass
    -}}

    {{-if Options.Data.Mapping.Document~}}
    /// <summary>
    /// Allows configuration for an entity type <see cref="{{$safeName}}" />
    /// </summary>
    {{~end~}}
    public partial class {{$mappingClass}}
        : IEntityTypeConfiguration<{{$safeName}}>
    {
        {{~## GenerateConfigure() ##~}}
        {{~
        $entityClass    = Entity.EntityClass | to_safe_name
        $entityFullName = Entity.EntityNamespace + '.' + $entityClass
        ~}}
        {{~if Options.Data.Mapping.Document~}}
        /// <summary>
        /// Configures the entity of type <see cref="{{$entityFullName}}" />
        /// </summary>
        /// <param name="builder">The builder to be used to configure the entity type.</param>
        {{~end~}}
        public void Configure(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder<{{$entityFullName}}> builder)
        {
            #region Generated Configure

            {{~## GenerateTableMapping() ##~}}
            // table
            {{~
            $method = Entity.IsView ? 'ToView' : 'ToTable'
            ~}}
            {{~if Entity.TableSchema~}}
            builder.{{$method}}("{{Entity.TableName}}", "{{Entity.TableSchema}}");
            {{~else~}}
            builder.{{$method}}("{{Entity.TableName}}");
            {{~end~}}

            {{~## GenerateKeyMapping() ##~}}
            // key
            {{~
            $keys = Entity.Properties | array.filter @(do;ret $0.IsPrimaryKey; end)
            ~}}
            {{~if ($keys | array.size == 0)~}}
            builder.HasNoKey();
            {{~else~}}
            builder.HasKey(t =>
                {{-if $keys | array.size == 1-}}
                {{-
                $propertyName = ($keys | array.first).PropertyName | to_safe_name
                -}}
                {{-" t." + $propertyName}});
                {{~else}} new {
                {{~for $p in $keys~}}
                t.{{$p.PropertyName | to_safe_name}}{{for.last ? "" : ","}}
                {{~end~}}
            });
            
                {{~end~}}
            {{~end~}}

            {{~## GeneratePropertyMapping() ##~}}
            // properties
            {{~for $prop in Entity.Properties~}}
            {{~
            $isString    = $prop.SystemType.Name == 'String'
            $isByteArray = $prop.SystemType.FullName == 'Byte[]'
            ~}}
            builder.Property(t => t.{{$prop.PropertyName}})
            {{~if $prop.IsRequired~}}
                .IsRequired()
            {{~end~}}
            {{~if $prop.IsRowVersion~}}
                .IsRowVersion()
            {{~end~}}
                .HasColumnName({{$prop.ColumnName | to_literal}})
            {{~if $prop.StoreType # # TODO: NullOrEmpty ~}}
                .HasColumnType({{$prop.StoreType | to_literal}})
            {{~end~}}
            {{~if ($isString || $isByteArray) && $prop.Size > 0~}}
                .HasMaxLength({{$prop.Size}})
            {{~end~}}
            {{~if $prop.Default # # TODO: !string.IsNullOrEmpty(property.Default) ~}}
                .HasDefaultValueSql({{$prop.Default | to_literal}})
            {{~end~}}
            {{~case ($prop.ValueGenerated)~}}
                {{~when 'OnAdd'~}}
                .ValueGeneratedOnAdd()
                {{~when 'OnAddOrUpdate'~}}
                .ValueGeneratedOnAddOrUpdate()
                {{~when 'OnUpdate'~}}
                .ValueGeneratedOnUpdate()
            {{~end~}}
                ;
            {{~end~}}

            {{~## GenerateRelationshipMapping() ##~}}
            // relationships
            {{~for $rel in Entity.Relationships | array.filter @(do;ret $0.IsMapped;end)~}}
            builder.HasOne(t => t.{{$rel.PropertyName}})
            {{~if $rel.PrimaryCardinality == 'Many'~}}
                .WithMany(t => t.{{$rel.PrimaryPropertyName}})
            {{~else~}}
                .WithOne(t => t.{{$rel.PrimaryPropertyName}})
            {{~end~}}
                .HasForeignKey
            {{-
            $keys = $rel.Properties
            -}}
            {{-if $rel.IsOneToOne-}}
                <
                {{-Entity.EntityNamespace-}}.
                {{-Entity.EntityClass | to_safe_name-}}
                >
            {{-end-}}(d =>
                {{-if $keys | array.size == 1-}}
                    {{" d." + (($keys | array.first).PropertyName | to_safe_name)}})
                {{~else}}
                    new {
                    {{~for $p in $keys~}}
                        d.{{$p.PropertyName | to_safe_name}}{{for.last ? "" : ","}}
                    {{~end~}}
                    })
                {{~end~}}
            {{~if $rel.RelationshipName~}}
                .HasConstraintName("{{$rel.RelationshipName}}")
            {{~end~}}
                ;
            {{~end~}}

            #endregion // Generated Configure
        }
    }
}
